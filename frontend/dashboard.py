import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go

API_URL = "http://localhost:8000"  # FastAPI backend

st.set_page_config(page_title="Stock Dashboard", layout="wide")
st.title("üìä Stock Prediction Dashboard")

symbols = ["ACB", "FPT", "VNM"]
choice = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", symbols)

if st.button("L·∫•y d·ª± ƒëo√°n"):
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu v√† d·ª± ƒëo√°n..."):
        res = requests.get(f"{API_URL}/prediction/{choice}")

    if res.status_code == 200:
        data = res.json()

        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
        st.subheader(f"üìà Ph√¢n t√≠ch cho m√£ {data['symbol']}")

        # Chia layout th√†nh 2 c·ªôt
        col1, col2 = st.columns(2)

        with col1:
            st.write("### üìä Metrics hi·ªáu su·∫•t")
            metrics_df = pd.DataFrame([data["metrics"]]).T
            metrics_df.columns = ["Gi√° tr·ªã"]
            st.dataframe(metrics_df, use_container_width=True)

            st.write(f"**Last Equity:** {data['last_equity']:.3f}")

        with col2:
            # üîÆ Hi·ªÉn th·ªã d·ª± ƒëo√°n ng√†y mai
            pred = data["prediction_next_day"]
            st.write("### üîÆ D·ª± ƒëo√°n ng√†y mai")

            # Signal v·ªõi m√†u s·∫Øc
            if pred["signal"] == 1:
                st.success("üìà **TƒÇNG GI√Å**")
            else:
                st.error("üìâ **GI·∫¢M GI√Å**")

            # Th√¥ng tin gi√° - FIX: Hi·ªÉn th·ªã ƒë√∫ng ƒë·ªãnh d·∫°ng VND
            current_price = pred["current_price"] * 1000  # Convert to VND
            predicted_price = pred["predicted_price"] * 1000  # Convert to VND
            price_change = predicted_price - current_price
            percentage_change = (price_change / current_price) * 100

            st.write(f"**Gi√° hi·ªán t·∫°i:** {current_price:,.0f} VNƒê")
            st.write(f"**Gi√° d·ª± ƒëo√°n:** {predicted_price:,.0f} VNƒê")
            st.write(
                f"**Thay ƒë·ªïi:** {price_change:+.0f} VNƒê ({percentage_change:+.2f}%)"
            )

            # X√°c su·∫•t
            st.write("**X√°c su·∫•t:**")
            prob_df = pd.DataFrame(
                {
                    "H∆∞·ªõng": ["Gi·∫£m (0)", "TƒÉng (1)"],
                    "X√°c su·∫•t": [
                        f"{pred['probability'][0]:.1%}",
                        f"{pred['probability'][1]:.1%}",
                    ],
                }
            )
            st.dataframe(prob_df, hide_index=True)

        # V·∫Ω bi·ªÉu ƒë·ªì - FIX: S·ª≠a l·ªói indexing
        st.write("### üìà Bi·ªÉu ƒë·ªì l·ªãch s·ª≠")
        hist = data["history"]

        # Chuy·ªÉn ƒë·ªïi dictionary th√†nh DataFrame
        close_data = pd.Series(hist["Close"])
        signal_data = pd.Series(hist["Signal"])
        equity_data = pd.Series(hist["Equity Curve"])

        fig = go.Figure()

        # ƒê∆∞·ªùng gi√° Close
        fig.add_trace(
            go.Scatter(
                x=close_data.index,
                y=close_data.values,
                mode="lines",
                name="Gi√° ƒë√≥ng c·ª≠a",
                line=dict(color="blue", width=2),
            )
        )

        # ƒê∆∞·ªùng Equity Curve
        fig.add_trace(
            go.Scatter(
                x=equity_data.index,
                y=equity_data.values,
                mode="lines",
                name="Equity Curve",
                line=dict(color="green", width=2),
                yaxis="y2",
            )
        )

        # FIX: T√≠n hi·ªáu mua/b√°n - S·ª≠a l·ªói indexing
        buy_signals_idx = signal_data[signal_data == 1].index
        sell_signals_idx = signal_data[signal_data == 0].index

        if len(buy_signals_idx) > 0:
            fig.add_trace(
                go.Scatter(
                    x=buy_signals_idx,
                    y=[
                        close_data.loc[i] for i in buy_signals_idx
                    ],  # S·ª≠ d·ª•ng .loc thay v√¨ .iloc
                    mode="markers",
                    name="T√≠n hi·ªáu MUA",
                    marker=dict(color="green", size=8, symbol="triangle-up"),
                )
            )

        if len(sell_signals_idx) > 0:
            fig.add_trace(
                go.Scatter(
                    x=sell_signals_idx,
                    y=[
                        close_data.loc[i] for i in sell_signals_idx
                    ],  # S·ª≠ d·ª•ng .loc thay v√¨ .iloc
                    mode="markers",
                    name="T√≠n hi·ªáu B√ÅN",
                    marker=dict(color="red", size=8, symbol="triangle-down"),
                )
            )

        # C·∫•u h√¨nh layout v·ªõi dual y-axis
        fig.update_layout(
            title=f"L·ªãch s·ª≠ gi√° v√† t√≠n hi·ªáu giao d·ªãch - {choice}",
            xaxis_title="Th·ªùi gian",
            yaxis=dict(title="Gi√° (VNƒê)", side="left"),
            yaxis2=dict(title="Equity Curve", side="right", overlaying="y"),
            hovermode="x unified",
            height=600,
        )

        st.plotly_chart(fig, use_container_width=True)

    else:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu: {res.status_code}")

if st.button("Danh m·ª•c (Portfolio)"):
    with st.spinner("ƒêang ph√¢n t√≠ch danh m·ª•c..."):
        res = requests.get(f"{API_URL}/portfolio")

    if res.status_code == 200:
        data = res.json()
        st.subheader("üìä Portfolio Metrics")

        # Hi·ªÉn th·ªã metrics d∆∞·ªõi d·∫°ng b·∫£ng ƒë·∫πp
        metrics_df = pd.DataFrame([data["metrics"]]).T
        metrics_df.columns = ["Gi√° tr·ªã"]

        # T·∫°o m√†u s·∫Øc cho c√°c metrics
        styled_metrics = metrics_df.style.format(
            {
                "Gi√° tr·ªã": lambda x: (
                    f"{x:.1%}"
                    if "Rate" in str(x) or "Return" in str(x) or "CAGR" in str(x)
                    else f"{x:.3f}"
                )
            }
        )

        st.dataframe(styled_metrics, use_container_width=True)

        # Hi·ªÉn th·ªã m·ªôt s·ªë th√¥ng tin n·ªïi b·∫≠t
        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric(
                "Total Return", f"{data['metrics']['Total Return']:.1%}", delta=None
            )

        with col2:
            st.metric("CAGR", f"{data['metrics']['CAGR']:.1%}", delta=None)

        with col3:
            st.metric("Sharpe Ratio", f"{data['metrics']['Sharpe']:.3f}", delta=None)
    else:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu portfolio: {res.status_code}")

# Th√™m th√¥ng tin b·ªï sung
st.sidebar.markdown("### ‚ÑπÔ∏è Th√¥ng tin")
st.sidebar.markdown(
    """
**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
1. Ch·ªçn m√£ c·ªï phi·∫øu t·ª´ dropdown
2. Nh·∫•n "L·∫•y d·ª± ƒëo√°n" ƒë·ªÉ xem ph√¢n t√≠ch
3. Nh·∫•n "Danh m·ª•c" ƒë·ªÉ xem hi·ªáu su·∫•t t·ªïng th·ªÉ

**Gi·∫£i th√≠ch metrics:**
- **Total Return**: T·ªïng l·ª£i nhu·∫≠n
- **CAGR**: T·ª∑ su·∫•t tƒÉng tr∆∞·ªüng k√©p h√†ng nƒÉm
- **Max Drawdown**: M·ª©c thua l·ªó t·ªëi ƒëa
- **Sharpe**: T·ª∑ l·ªá r·ªßi ro/l·ª£i nhu·∫≠n
- **Win Rate**: T·ª∑ l·ªá giao d·ªãch th·∫Øng
- **Profit Factor**: H·ªá s·ªë l·ª£i nhu·∫≠n
"""
)
